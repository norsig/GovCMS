// Dependencies.
@import 'init';

// Forms
//
// Weight: 2
//
// Style guide: base.forms

form {
  // Add your styles.
}

// Buttons
//
// Buttons built with the `<button>` element are the most flexible for styling
// purposes. But `<input>` elements with `type` set to `submit`, `image`,
// `reset`, or `button` are also supported.
//
// Below is the default button styling. To see variations on the button styling
// see the [button component](section-components.html#kssref-components-button).
//
// Markup: forms-button.hbs
//
// :hover  - Hover styling.
//
// Style guide: base.forms.button

button,
[type="button"],
[type="reset"],
[type="submit"] {
  // Add your styles.
}

// The %form-element can be used to style different kinds of form elements at
// the same time.
@mixin form-element {
  // Add your styles.

  &:hover,
  &:focus {
    // Your styles
  }

  &[disabled] {
    opacity: .65;
  }
}

// Inputs
//
// The `<input>` element is mostly used for text-based inputs that include the
// HTML5 types: `text`, `search`, `tel`, `url`, `email`, `password`, `date`,
// `time`, `number`, `range`, `color`, and `file`.
//
// Markup: forms-input.hbs
//
// :hover - Hover styling.
//
// Style guide: base.forms.input

input {
  &[type="text"],
  &[type="tel"],
  &[type="url"],
  &[type="email"],
  &[type="password"],
  &[type="date"],
  &[type="time"],
  &[type="number"] {
    @include form-element;
  }

  &[type="range"] {
    // Add your styles.
  }

  &[type="color"] {
    // Add your styles
  }

  &[type="file"] {
    @include form-element;
  }

  &[type="search"] {
    @include form-element;
  }
}

// Checkboxes
//
// If an `<input>` element has the `type="checkbox"` attribute set, the form
// field is displayed as a checkbox.
//
// It's recommended that you don't attempt to style these elements. Firefox's
// implementation doesn't respect `box-sizing`, `padding`, or `width`.
//
// Markup: forms-input-checkbox.hbs
//
// Style guide: base.forms.input-checkbox

// Radio buttons
//
// If an `<input>` element has the `type="radio"` attribute set, the form field
// is displayed as a radio button.
//
// It's recommended that you don't attempt to style these elements. Firefox's
// implementation doesn't respect `box-sizing`, `padding`, or `width`.
//
// Markup: forms-input-radio.hbs
//
// Style guide: base.forms.input-radio

input[type="checkbox"],
input[type="radio"] {
  // Inherit from agov_base.
}

// Fieldsets
//
// The `<fieldset>` element groups a set of form fields, optionally under a
// common name given by the `<legend>` element.
//
// Markup: forms-fieldset.hbs
//
// Style guide: base.forms.fieldset

fieldset {
  // Add your styles
}

legend {
  // Add your styles
}

// Labels
//
// The `<label>` element represents a caption of a form field. The label can be
// associated with a specific form control by using the `for` attribute or by
// putting the form control inside the label element itself.
//
// Markup: forms-label.hbs
//
// Style guide: base.forms.label

label {
  // Add your styles
}

// Select list
//
// The `<select>` element represents a form field for selecting amongst a set of
// options.
//
// Known limitation: by default, Chrome and Safari on OS X allow very limited
// styling of `<select>`, unless a `border` property is set.
//
// Markup: forms-select.hbs
//
// Style guide: base.forms.select

select {
  @include form-element;
}

// Text areas
//
// The `<textarea>` element represents a multi-line plain text form field.
//
// Markup: forms-textarea.hbs
//
// :hover - Hover styling.
//
// Style guide: base.forms.textarea

textarea {
  @include form-element;
  // Remove default vertical scrollbar in IE 8/9/10/11.
  overflow: auto;
}
